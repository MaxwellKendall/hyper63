# hyper63 Documentation

## Adapters

hyper63 uses a plugin model to create service adapters for they hyper63 gateway. This model enables the hyper63 gateway to provide the same consist port specications with different implementation details. Before jumping into adapters lets go through some terms that we use in the hyper63 project to describe certain attributes of the system.

### What is a service gateway?

hyper63 is a service gateway which means it provides a single service entry point for a set of backend services that applications need to manage their data. The gateway acts as an application entry point that
contains a consistent api for services like data, caching, searching, and storage. There are several
solutions out in the software world that provide resources for each of these services and this gateway
enables your application to use those resources in a way that creates a clear abstraction layer between
your business logic and the resource access layer.

### What is a hyper63 port?

A port is a definition of how a particular set of rules should be implemented, in hyper63 we have several ports: data, cache, storage, search, hooks. Each of these ports have specific code shapes that define how functionality is implemented. By using the pattern, hyper63 can leverage many different services with various implementations. This results in a highly flexible implementation, and encourages isolation from your applications business logic and your applications backend services.

### What is a hyper63 adapter?

An adapter is a specific implementation of a hyper63 port, this means the adapter MUST implement all of the required functions for a given port so that hyper63 can delegate the request from the interface to the implemented service. The benefits of following the adapter pattern is that over time, you can replace the service implementation without having to re-write your application business logic. Another advantage is that if you are creating multiple applications or microservices, you can leverage hyper63 to use generic services models and keep your implementation services consistent. This can make the managing of multiple applications and microservices significantly less burdensome overtime.

### What is a hyper63 plugin?

A plugin is a block of code that can be chained together via configuration. It must meet a specific code signature in order for the configuration code to connect all the plugins together.

### Plugin Attributes

A hyper63 plugin must have the following attributes:

| Name | Type                  | Description                                                                                                                                                                                                                                   |
| ---- | --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| id   | [string]              | Unique name of the adapter/plugin                                                                                                                                                                                                             |
| port | [string]              | Name of the hyper63 port the adapter/plugin is implementing                                                                                                                                                                                   |
| load | function              | The load function manages any processing that needs to be done <br /> during the loading stage of the plugin, <br /> the returned result of the load function will be passed to the <br /> link function as configuration data                |
| link | higher order function | The link function is where the adapter/plugin returns the implemenation details <br/> for a given port. After all plugins are linked, all of the specified methods <br /> for a given port should be implemented. If not an error will occur. |

Here is an example adapter:

```js
import adapter from "./adpater";
export default function (pluginConfig) {
  return {
    id: "mongodb",
    port: "data",
    load: () => pluginConfig,
    link: (env) => () => adapter(env),
  };
}
```

When you create a hyper63 config file, you want to specify a set of plugins for each port that
makes up an adapter implementation.

```js
import redis from "@hyper63/adapter-redis";
import trace from "@hyper63/plugin-trace";

export default {
  adapters: [
    { port: "cache", plugins: [trace(), redis({ url: process.env.REDIS })] },
  ],
};
```

In this example config file, we are using the redis adapter and trace plugin to
combine to create an adapter for the cache port. When hyper63 initializes it will
dynamically import these modules and compose them together to create and instanciate
adapters for each defined port. Then pass these instanciated adapters to the app as
service objects.

## Searching for implemented adapters

https://www.npmjs.com/search?q=keywords:@hyper63

## Create your own adapter, read this simple tutorial to get you started.

TODO: create tutorial for creating adapters

[Documentation](/documentation) | [Home](/)

<style>
td {
  text-align: left;
}
</style>
