# hyper63 hooks

## What are hooks?

In hyper63, you have service requests and you need visibility in to the service requests for monitoring, or troubleshooting, or performance tuning. Or you may want to trigger some worker job from a particular
event. hyper63 hooks is a port that allows you to specify 0 to many web hooks to be triggered when events
in the hyper63 gateway occur. You can use a matcher property to specify a pattern to that will trigger the
hook. Then everytime a request occurs and it is successful, you will receive an asynchronous web request for the target of your hook.

## How do they work?

In the `hyper63.config.js` file you want to import the hook adapter:

```js
import { hooksAdapter } from "@hyper63/adapter-hooks";
```

Then you want to create an array of hook objects

```js
const hooks([
  {
    matcher: '*', // match all events
    target: 'https://monitoring.example.com/events/_doc'
  },
  {
    matcher: 'SEARCH:*', // match all SEARCH events
    target: 'https://monitoring.example.com/search-events/_doc'
  },
  {
    matcher: '*:DELETE', // audit all delete events
    target: 'https://audits.example.com/audits/_doc'
  }
])
```

Then in your adapters section, you want to include the hookAdapter and
give it the hooks.

```js
export default {
  ...
  adapters: [
    ...
    { port: 'hooks', plugins: [hooksAdapter(hooks)] }
}
```

## What are some events I can hook in to?

Data

- DATA:CREATE_DB - create database
- DATA:DELETE_DB - delete database
- DATA:CREATE - create document
- DATA:GET - get document
- DATA:UPDATE - update document
- DATA:DELETE - delete document

Cache

- CACHE:CREATE_STORE - create cache store
- CACHE:DELETE_STORE - delete cache store
- CACHE:CREATE - create cache document
- CACHE:GET - get cache document
- CACHE:UPDATE - update cache document
- CACHE:DELETE - delete cache document
- CACHE:LIST - list/query cache documents

Storage

- STORAGE:CREATE_BUCKET - create bucket
- STORAGE:DELETE_BUCKET - delete bucket
- STORAGE:CREATE - create object
- STORAGE:GET - get object
- STORAGE:UPDATE - update object
- STORAGE:DELETE - delete object
- STORAGE:LIST - list objects

Search

- SEARCH:CREATE_INDEX - create index
- SEARCH:DELETE_INDEX - delete index
- SEARCH:CREATE - index document
- SEARCH:GET - get document
- SEARCH:UPDATE - update document
- SEARCH:DELETE - delete document
- SEARCH:QUERY - query index
