openapi: 3.0.3
info:
  title: hyper63 
  description: >
    ![logo](https://hyper63.com/favicon-96x96.png)

    # Welcome to hyper63 

    A service-gateway

    hyper63 provides api abstractions to some of the core application building blocks. Using the ports and 
    adapters architecture, hyper63's approach empowers you
    to use the service for each port you prefer.

      * cache [implemented]
      * data [wip]
      * storage [wip]
      * search [wip]
      * hooks [wip]

    ## Getting started

    ```
    npx hyper63
    ```
    
    [source code](https://github.com/hyper63/hyper63)

  contact:
    url: "https://hyper63.com"
    email: tom@hyper63.com
    name: hyper63
  license:
    name: Apache License 2.0
    url: "https://github.com/hyper63/hyper63/blob/main/LICENSE"
  version: "1.0"
  termsOfService: "https://hyper63.com/termsofuse.text"
servers:
  - description: Development Server
    url: "http://localhost:6363"
paths:
  /:
    get:
      description: >
        # HealthCheck
        
        This endpoint returns 200 if the system is 
        healthy and returns 500 if all of the 
        pings for each service did not come back successful
        
        TODO: In the future this endpoint should list
        all the configured ports and the adapter information
        of each port.
      responses:
        "200":
          description: successful health response
          content:
            application/json:
              schema:
                properties:
                  name:
                    description: name of service
                    type: string
        500:
          description: one or more of the services are not responding
  /cache:
    get:
      description: >

        # Cache Information
        
        This the endpoint returns the current state
        of the Cache Service
        
        > TODO: return the list of cache stores
        
      tags: [cache]
      responses:
        200:
          description: cache module info
          content:
            application/json:
              schema:
                properties:
                  name:
                    description: name of module
                    type: string
                  version:
                    description: module version
                    type: string
                  stores:
                    description: list of active stores
                    type: array
                  status:
                    description: stability of module
                    type: string
                    enum:
                      - stable
                      - unstable
                    default: unstable
  /cache/{name}:
    put:
      description: >
      
        # Create Cache Store
        
        A cache store is a prefix for a cache so 
        that all keys can be stored or grouped under
        a common name. This makes it easy to manage
        cached data.
        
        When creating a cache store you must give it
        a name and that name can only have alpha-numeric
        characters and the '-' character. The cache store
        name will not be case-sensitive.
      tags: [cache]
      parameters:
        - name: name
          in: path
          description: (case insensitive) accepts alphanumeric charcters and dash 
          required: true
          schema:
            type: string
      responses:
        "201":
          description: successfully created store
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        "500":
          description: >
            getting a 500 is more than likely a name 
            validation error or the service is not 
            available. In the event of a name validation
            error, be sure to check the message to 
            determine what is invalid about your 
            cache name.
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
    delete:
      description: >
        # Delete store
        
        This function deletes a cache store and removes all
        keys that were a part of this store. Once a store
        is delete it will be impossible to recover the cache
        data, so make sure you use this function with great
        care.
      tags: [cache]
      parameters:
        - name: name
          in: path
          description: name of cache store
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully deleted store
    post:
      description: >
      
        # Create Cache Document
        
        This cache service accepts JSON documents, it is worth
        noting that a number, string, array are all valid json
        documents. 
        
        When storing a document to the cache, you will want to 
        give it a key, this is how you will recall your document
        from the cache. You also have the option to add a `ttl` 
        property, or time to live, which lets the cache know 
        how long to keep the value in the cache. The ttl property 
        takes values like `1m`  one minute, `2h` two hours, `3d` three days.
        
      tags: [cache]
      parameters:
        - name: name
          in: path
          description: name of cache store
          required: true
          schema:
            type: string
      requestBody:
        description: cache document
        required: true
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                value:
                  type: object
                ttl:
                  type: string
      responses:
        "201":
          description: successfully create cache doc
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: true
                  doc:
                    type: object
        "500":
          description: internal error occured
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
  "/cache/{name}/_query":
    get:
      description: query cache with key match pattern
      tags: [cache]
      parameters:
        - name: name
          in: path
          description: name of cache store
          required: true
          schema:
            type: string
        - name: pattern
          in: query
          description: pattern to match keys
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successfully responde with list of docs
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: true
                  docs:
                    type: array
        "500":
          description: error occured with query
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
  "/cache/{name}/{key}":
    get:
      description: get cache key from store
      tags: [cache]
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
        - name: key
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: successful response
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: true
                  doc:
                    type: object
        "500":
          description: error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
    put:
      description: update cache document
      tags: [cache]
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
        - name: key
          in: path
          schema:
            type: string
          description: cache document
          required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                value:
                  type: object
                ttl:
                  type: string
      responses:
        "200":
          description: successfully create cache doc
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: true
                  doc:
                    type: object
        "500":
          description: internal error occured
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
    delete:
      description: remove cache document
      tags: [cache]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully create cache doc
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: true
                  doc:
                    type: object
        "500":
          description: internal error occured
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                    default: false
                  msg:
                    type: string
  /data:
    get:
      description: data module information
      tags: [data]
      responses:
        200:
          description: data module info
          content:
            application/json:
              schema:
                properties:
                  name:
                    description: module name
                    type: string
        500:
          description: service not available
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
  /data/{name}:
    put:
      description: create database
      tags: [data]
      parameters:
        - name: name
          in: path
          description: name of database
          required: true
          schema:
            type: string
      responses:
        201:
          description: successfully created database
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        500:
          description: server error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
    delete:
      description: remove database
      tags: [data]
      parameters:
        - name: name
          in: path
          description: name of database
          required: true
          schema:
            type: string
      responses:
        200:
          description: successfully removed database
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        500:
          description: could not remove database
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
    post:
      description: create document
      tags: [data]
      parameters:
        - name: name
          in: path
          description: name of database
          required: true
          schema:
            type: string
      requestBody:
        description: json body that requires submitting
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: successfully created document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  id:
                    type: string
        500:
          description: server error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
  /data/{name}/_index:
    post:
      description: create secondary index
      tags: [data]
      parameters:
        - name: name
          in: path
          required: true
          description: name of database
          schema:
            type: string
      responses:
        201:
          description: success
  /data/{name}/_query:
    post:
      description: query database
      tags: [data]
      parameters:
        - name: name
          in: path
          required: true
          description: name of database
          schema:
            type: string
      requestBody:
        description: json query document
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: successful result
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  docs:
                    type: array
        500:
          description: error trying to run query
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string

  /data/{name}/{id}:
    get:
      description: get document
      tags: [data]
      parameters:
        - name: name
          in: path
          required: true
          description: database name
          schema:
            type: string
        - name: id
          in: path
          description: document id
          required: true
          schema:
            type: string
      responses:
        200:
          description: get document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  document:
                    type: object
        500:
          description: server error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
    put:
      description: update document
      tags: [data]
      parameters:
        - name: name
          in: path
          description: database name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: document id
          required: true
          schema:
            type: string
      requestBody:
        description: json body that requires submitting
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: update document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  id:
                    type: string
        500:
          description: error updating document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
    delete:
      description: delete document
      tags: [data]
      parameters:
        - name: name
          in: path
          description: database name
          required: true
          schema:
            type: string
        - name: id
          description: document id
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: deleted document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  id:
                    type: string
        500:
          description: error trying to delete document
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  id:
                    type: string
  /storage:
    get:
      description: storage module healthcheck
      tags: [storage]
      responses:
        200:
          description: healthcheck json
          content:
            application/json:
              schema:
                type: object
  /storage/{name}:
    put:
      description: make storage bucket
      tags: [storage]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        500:
          description: error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
    delete:
      description: remove storage bucket - all items must be removed
      tags: [storage]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        500:
          description: error
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string

    post:
      description: upload file to storage
      tags: [storage]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      requestBody:
        description: placeholder
        content:
          multipart/form-data:
            schema:
              required:
                - file
              properties:
                file:
                  description: form-data file buffer
                  type: object
                path:
                  description: path to store file
                  type: string
      responses:
        201:
          description: successful upload
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
        500:
          description: error with upload
          content:
            application/json:
              schema:
                properties:
                  ok:
                    type: boolean
                  msg:
                    type: string
  /storage/{name}/_list:
    get:
      description: list items in storage bucket
      tags: [storage]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        200:
          description: get list of items in bucket
  /storage/{name}/{object}:
    get:
      description: download file from storage
      tags: [storage]
      parameters:
      - in: path
        description: storage bucket name
        required: true
        name: name
        schema:
          type: string
      - in: path
        description: object path and name
        required: true
        name: object
        schema:
          type: string
      responses:
        200:
          description: returns object
    delete:
      description: delete file from storage
      tags: [storage]
      parameters:
      - in: path
        description: storage bucket name
        required: true
        name: name
        schema:
          type: string
      - in: path
        description: object path and name
        required: true
        name: object
        schema:
          type: string
      responses:
        200:
          description: delete object
  /search/{name}:
    put:
      description: create search index
      tags: [search]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        201:
          description: created search index
    delete:
      description: delete search index
      tags: [search]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        200:
          description: deleted search index
  /search/{name}/_index:
    post:
      description: indexes json object
      tags: [search]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        200:
          description: success
      
  /search/{name}/_search:
    get:
      description: search index
      tags: [search]
      parameters:
      - in: path
        required: true
        name: name
        schema:
          type: string
      responses:
        200:
          description: success